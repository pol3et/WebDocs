{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to My Web Projects documentation About This documentation provides a comprehensive guide to understand, contribute, and use the various components of my web development projects. Here, you'll find detailed information, usage guidelines, and examples to help you navigate through the projects seamlessly. Start To start go to navbar and select a project!","title":"Home"},{"location":"#welcome-to-my-web-projects-documentation","text":"","title":"Welcome to My Web Projects documentation"},{"location":"#about","text":"This documentation provides a comprehensive guide to understand, contribute, and use the various components of my web development projects. Here, you'll find detailed information, usage guidelines, and examples to help you navigate through the projects seamlessly.","title":"About"},{"location":"#start","text":"To start go to navbar and select a project!","title":"Start"},{"location":"Lab2/forms/","text":"forms.py Registration Form from django import forms from .models import Passenger, Reservation, Comment class RegistrationForm(forms.ModelForm): class Meta: model = Passenger fields = [\"username\", \"password\", \"first_name\", \"last_name\", \"email\", \"passport\"] Description : Defines a form for user registration. Inherits from forms.ModelForm and includes fields for username, password, first name, last name, email, and passport. Login Form from django import forms from .models import Passenger, Reservation, Comment class LoginForm(forms.ModelForm): class Meta: model = Passenger fields = [\"username\", \"password\"] Description : Defines a form for user login. Inherits from forms.ModelForm and includes fields for username and password. Reservation Form from django import forms from .models import Passenger, Reservation, Comment class ReservationForm(forms.ModelForm): class Meta: model = Reservation fields = [\"room\", \"date_start\", \"date_finish\"] Description : Defines a form for making a reservation. Inherits from forms.ModelForm and includes fields for room selection, start date, and finish date. Comment Form from django import forms from .models import Passenger, Reservation, Comment class CommentForm(forms.ModelForm): class Meta: model = Comment fields = [\"rating\", \"text\"] Description : Defines a form for submitting comments. Inherits from forms.ModelForm and includes fields for rating and text.","title":"Forms"},{"location":"Lab2/forms/#formspy","text":"","title":"forms.py"},{"location":"Lab2/forms/#registration-form","text":"from django import forms from .models import Passenger, Reservation, Comment class RegistrationForm(forms.ModelForm): class Meta: model = Passenger fields = [\"username\", \"password\", \"first_name\", \"last_name\", \"email\", \"passport\"] Description : Defines a form for user registration. Inherits from forms.ModelForm and includes fields for username, password, first name, last name, email, and passport.","title":"Registration Form"},{"location":"Lab2/forms/#login-form","text":"from django import forms from .models import Passenger, Reservation, Comment class LoginForm(forms.ModelForm): class Meta: model = Passenger fields = [\"username\", \"password\"] Description : Defines a form for user login. Inherits from forms.ModelForm and includes fields for username and password.","title":"Login Form"},{"location":"Lab2/forms/#reservation-form","text":"from django import forms from .models import Passenger, Reservation, Comment class ReservationForm(forms.ModelForm): class Meta: model = Reservation fields = [\"room\", \"date_start\", \"date_finish\"] Description : Defines a form for making a reservation. Inherits from forms.ModelForm and includes fields for room selection, start date, and finish date.","title":"Reservation Form"},{"location":"Lab2/forms/#comment-form","text":"from django import forms from .models import Passenger, Reservation, Comment class CommentForm(forms.ModelForm): class Meta: model = Comment fields = [\"rating\", \"text\"] Description : Defines a form for submitting comments. Inherits from forms.ModelForm and includes fields for rating and text.","title":"Comment Form"},{"location":"Lab2/models/","text":"models.py City Model class City(models.Model): name = models.CharField(max_length=1000) Description : This model represents a City with a name attribute. Hotel Model class Hotel(models.Model): name = models.CharField(max_length=50) owner = models.CharField(max_length=200) city = models.ForeignKey('hotels.City', related_name='hotels_there', on_delete=models.CASCADE) address = models.CharField(max_length=1000) def __str__(self): return f\"{self.name}\" Description : Represents a Hotel with attributes such as name, owner, city (linked to the City model), and address. The __str__ method returns the name of the hotel. TypeOfRoom Model class TypeOfRoom(models.Model): name = models.CharField(max_length=20) capacity = models.IntegerField() conveniences = models.CharField(max_length=1000) cost = models.FloatField() Description : Defines a TypeOfRoom model with attributes like name, capacity, conveniences, and cost. Room Model class Room(models.Model): hotel = models.ForeignKey('hotels.Hotel', related_name='rooms', on_delete=models.CASCADE) type = models.ForeignKey('hotels.TypeOfRoom', related_name='rooms_of_this_type', on_delete=models.CASCADE) number = models.CharField(max_length=10) Description : Represents a Room with a hotel (linked to Hotel model), type (linked to TypeOfRoom model), and a room number. Reservation Model class Reservation(models.Model): passenger = models.ForeignKey(settings.AUTH_USER_MODEL, related_name='user_reservations', on_delete=models.CASCADE) room = models.ForeignKey('hotels.Room', related_name='reserved_by', on_delete=models.CASCADE) date_start = models.DateField() date_finish = models.DateField() Description : Defines a Reservation model, linking a passenger (user), room (linked to Room model), and reservation dates. Comment Model class Comment(models.Model): hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE) author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE) text = models.TextField() rating = models.IntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)]) Description : Represents a Comment on a Hotel, associated with an author (user), text, and a rating with validation. Passenger Model class Passenger(AbstractUser): passport = models.CharField(max_length=100) def __str__(self): return f\"{self.first_name} {self.last_name} {self.passport}\" Description : Extends the Django AbstractUser model to include a passport attribute. views.py next","title":"Models"},{"location":"Lab2/models/#modelspy","text":"","title":"models.py"},{"location":"Lab2/models/#city-model","text":"class City(models.Model): name = models.CharField(max_length=1000) Description : This model represents a City with a name attribute.","title":"City Model"},{"location":"Lab2/models/#hotel-model","text":"class Hotel(models.Model): name = models.CharField(max_length=50) owner = models.CharField(max_length=200) city = models.ForeignKey('hotels.City', related_name='hotels_there', on_delete=models.CASCADE) address = models.CharField(max_length=1000) def __str__(self): return f\"{self.name}\" Description : Represents a Hotel with attributes such as name, owner, city (linked to the City model), and address. The __str__ method returns the name of the hotel.","title":"Hotel Model"},{"location":"Lab2/models/#typeofroom-model","text":"class TypeOfRoom(models.Model): name = models.CharField(max_length=20) capacity = models.IntegerField() conveniences = models.CharField(max_length=1000) cost = models.FloatField() Description : Defines a TypeOfRoom model with attributes like name, capacity, conveniences, and cost.","title":"TypeOfRoom Model"},{"location":"Lab2/models/#room-model","text":"class Room(models.Model): hotel = models.ForeignKey('hotels.Hotel', related_name='rooms', on_delete=models.CASCADE) type = models.ForeignKey('hotels.TypeOfRoom', related_name='rooms_of_this_type', on_delete=models.CASCADE) number = models.CharField(max_length=10) Description : Represents a Room with a hotel (linked to Hotel model), type (linked to TypeOfRoom model), and a room number.","title":"Room Model"},{"location":"Lab2/models/#reservation-model","text":"class Reservation(models.Model): passenger = models.ForeignKey(settings.AUTH_USER_MODEL, related_name='user_reservations', on_delete=models.CASCADE) room = models.ForeignKey('hotels.Room', related_name='reserved_by', on_delete=models.CASCADE) date_start = models.DateField() date_finish = models.DateField() Description : Defines a Reservation model, linking a passenger (user), room (linked to Room model), and reservation dates.","title":"Reservation Model"},{"location":"Lab2/models/#comment-model","text":"class Comment(models.Model): hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE) author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE) text = models.TextField() rating = models.IntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)]) Description : Represents a Comment on a Hotel, associated with an author (user), text, and a rating with validation.","title":"Comment Model"},{"location":"Lab2/models/#passenger-model","text":"class Passenger(AbstractUser): passport = models.CharField(max_length=100) def __str__(self): return f\"{self.first_name} {self.last_name} {self.passport}\" Description : Extends the Django AbstractUser model to include a passport attribute.","title":"Passenger Model"},{"location":"Lab2/models/#viewspy-next","text":"","title":"views.py next"},{"location":"Lab2/overview/","text":"Lab 2 Let's take a look at the functionality first: First we have to register Now we log in Welcome to the main page! Here we can use filters to look for specific hotels Let's make a reservation Now procced to the reservation list Here we can change reservation info. Let's do just that You can see the dates changed Now that we our reservation due date is over we an leave a comment: From admin page we can change and delete reservations Now you can review the code! For example see the models code for further inspection of the project.","title":"Overview"},{"location":"Lab2/overview/#lab-2","text":"","title":"Lab 2"},{"location":"Lab2/overview/#lets-take-a-look-at-the-functionality-first","text":"","title":"Let's take a look at the functionality first:"},{"location":"Lab2/overview/#first-we-have-to-register","text":"","title":"First we have to register"},{"location":"Lab2/overview/#now-we-log-in","text":"","title":"Now we log in"},{"location":"Lab2/overview/#welcome-to-the-main-page","text":"","title":"Welcome to the main page!"},{"location":"Lab2/overview/#here-we-can-use-filters-to-look-for-specific-hotels","text":"","title":"Here we can use filters to look for specific hotels"},{"location":"Lab2/overview/#lets-make-a-reservation","text":"","title":"Let's make a reservation"},{"location":"Lab2/overview/#now-procced-to-the-reservation-list","text":"","title":"Now procced to the reservation list"},{"location":"Lab2/overview/#here-we-can-change-reservation-info-lets-do-just-that","text":"","title":"Here we can change reservation info. Let's do just that"},{"location":"Lab2/overview/#you-can-see-the-dates-changed","text":"","title":"You can see the dates changed"},{"location":"Lab2/overview/#now-that-we-our-reservation-due-date-is-over-we-an-leave-a-comment","text":"","title":"Now that we our reservation due date is over we an leave a comment:"},{"location":"Lab2/overview/#from-admin-page-we-can-change-and-delete-reservations","text":"","title":"From admin page we can change and delete reservations"},{"location":"Lab2/overview/#now-you-can-review-the-code","text":"For example see the models code for further inspection of the project.","title":"Now you can review the code!"},{"location":"Lab2/urls/","text":"urls.py User Authentication URLs from django.urls import path from . import views urlpatterns = [ path(\"register/\", views.register, name=\"register\"), path(\"login/\", views.user_login, name=\"user_login\"), path(\"logout/\", views.user_logout, name=\"logout\"), ] Description : Defines URL patterns for user authentication, including registration, login, and logout. Hotel URLs from django.urls import path from . import views urlpatterns += [ path(\"hotels\", views.hotel_list, name=\"hotel_list\"), path(\"hotels/<int:hotel_id>\", views.hotel_detail, name=\"hotel_detail\"), path(\"hotels/<int:hotel_id>/reserve\", views.reserve_room, name=\"reserve_room\"), ] Description : Adds URL patterns for hotel-related views, including listing hotels, viewing hotel details, and reserving a room in a hotel. Reservation URLs from django.urls import path from . import views urlpatterns += [ path(\"reservations/\", views.reservations_for_user, name=\"reservations_for_user\"), path(\"reservations/<int:reservation_id>/\", views.reservation_update, name=\"reservation_update\"), path(\"reservations/<int:reservation_id>/delete\", views.reservation_delete, name=\"reservation_delete\"), ] Description : Appends URL patterns for user reservations, including listing reservations, updating a reservation, and deleting a reservation. forms.py next","title":"Urls"},{"location":"Lab2/urls/#urlspy","text":"","title":"urls.py"},{"location":"Lab2/urls/#user-authentication-urls","text":"from django.urls import path from . import views urlpatterns = [ path(\"register/\", views.register, name=\"register\"), path(\"login/\", views.user_login, name=\"user_login\"), path(\"logout/\", views.user_logout, name=\"logout\"), ] Description : Defines URL patterns for user authentication, including registration, login, and logout.","title":"User Authentication URLs"},{"location":"Lab2/urls/#hotel-urls","text":"from django.urls import path from . import views urlpatterns += [ path(\"hotels\", views.hotel_list, name=\"hotel_list\"), path(\"hotels/<int:hotel_id>\", views.hotel_detail, name=\"hotel_detail\"), path(\"hotels/<int:hotel_id>/reserve\", views.reserve_room, name=\"reserve_room\"), ] Description : Adds URL patterns for hotel-related views, including listing hotels, viewing hotel details, and reserving a room in a hotel.","title":"Hotel URLs"},{"location":"Lab2/urls/#reservation-urls","text":"from django.urls import path from . import views urlpatterns += [ path(\"reservations/\", views.reservations_for_user, name=\"reservations_for_user\"), path(\"reservations/<int:reservation_id>/\", views.reservation_update, name=\"reservation_update\"), path(\"reservations/<int:reservation_id>/delete\", views.reservation_delete, name=\"reservation_delete\"), ] Description : Appends URL patterns for user reservations, including listing reservations, updating a reservation, and deleting a reservation.","title":"Reservation URLs"},{"location":"Lab2/urls/#formspy-next","text":"","title":"forms.py next"},{"location":"Lab2/views/","text":"views.py Register User def register(request): if request.method == \"POST\": user_form = RegistrationForm(request.POST) if user_form.is_valid(): user = user_form.save() user.set_password(user.password) user.save() return redirect(\"user_login\") else: user_form = RegistrationForm() return render(request, \"register.html\", {\"user_form\": user_form}) Description : Handles user registration. Validates the registration form, saves the user, and redirects to the login page upon successful registration. User Login def user_login(request): if request.method == \"POST\": user_form = LoginForm(request.POST) username = user_form.data.get(\"username\") password = user_form.data.get(\"password\") user = authenticate(username=username, password=password) if user is None: return redirect(\"user_login\") login(request, user) return redirect(\"hotel_list\") else: user_form = LoginForm() return render(request, \"login.html\", {\"user_form\": user_form}) Description : Manages user login. Authenticates the user, logs them in, and redirects to the hotel list upon successful login. User Logout def user_logout(request): logout(request) return redirect(\"user_login\") Description : Logs the user out and redirects to the login page. Hotel List def hotel_list(request): if request.method != \"GET\": return Http404(f\"Method {request.method} not supported\") capacity = request.GET.get(\"capacity\", None) city = request.GET.get('city', None) available_capacities = TypeOfRoom.objects.values_list('capacity', flat=True) available_cities = City.objects.values_list('name', flat=True) hotels = Hotel.objects.all() if capacity is not None: hotels = hotels.filter(rooms__type__capacity__gte=capacity) if city is not None: hotels = hotels.filter(city__name=city) return render( request, \"list.html\", { \"capacity\": capacity, \"city\": city, \"available_capacities\": available_capacities, \"available_cities\": available_cities, \"hotels\": hotels }, ) Description : Retrieves and displays a list of hotels based on optional filter criteria such as capacity and city. Hotel Detail def hotel_detail(request, hotel_id): hotel = get_object_or_404(Hotel, pk=hotel_id) if request.method == \"POST\": comment_form = CommentForm(request.POST) if comment_form.is_valid(): if Reservation.objects.filter(passenger=request.user, room__hotel=hotel_id).exists(): comment = comment_form.save(commit=False) comment.hotel = Hotel.objects.get(id=hotel_id) comment.author = request.user comment.save() return redirect(\"hotel_detail\", hotel_id) else: rooms_set = Room.objects.filter(hotel__id=hotel_id).order_by(\"number\") rooms = [] for room in rooms_set: if not (Reservation.objects.filter(room=room, date_start__lte=datetime.date.today(), date_finish__gte=datetime.date.today()).exists()): rooms.append( { \"name\": f\"{room.number}\", \"capacity\": f\"{room.type.capacity}\", \"conveniences\": f\"{room.type.conveniences}\", \"cost\": f\"{room.type.cost}\" } ) comments = Comment.objects.filter(hotel=hotel) comment_form = CommentForm() return render( request, \"detail.html\", { \"hotel\": hotel, \"comments\": comments, \"comments_exists\": bool(comments.count()), \"rooms\": rooms, \"user\": request.user, \"comment_form\": comment_form }, ) Description : Displays detailed information about a specific hotel, including available rooms, comments, and handles adding comments and making reservations. Reserve Room @login_required(login_url='/login/') def reserve_room(request, hotel_id): hotel = Hotel.objects.get(id=hotel_id) if request.method == \"POST\": room = Room.objects.filter(number=request.POST['room']).first() try: date_start = datetime.datetime.strptime(request.POST[\"date-start\"], \"%d.%m.%Y\") date_finish = datetime.datetime.strptime(request.POST[\"date-finish\"], \"%d.%m.%Y\") form = ReservationForm({\"room\": room, \"date_start\": date_start, \"date_finish\": date_finish}) if not form.is_valid(): return redirect(\"hotel_detail\", hotel_id) reservation = form.save(commit=False) reservation.passenger = request.user reservation.room = room reservation.save() except Exception: return redirect(\"hotel_detail\", hotel_id) return redirect(\"hotel_detail\", hotel_id) else: return render(request, \"reserve_room.html\", {'form' : ReservationForm(), \"hotel\": hotel}) Description : Allows authenticated users to reserve a room in a hotel. Reservations for User @login_required(login_url='/login/') def reservations_for_user(request): reservations = Reservation.objects.filter(passenger=request.user) return render(request, \"reservation_for_user.html\", {\"reservations\": reservations}) Description : Displays a list of reservations for the logged-in user. Reservation Update def reservation_update(request, reservation_id): reservation = get_object_or_404(Reservation, id=reservation_id) if request.method == \"POST\": form = ReservationForm(data=request.POST, instance=reservation) if not form.is_valid(): return redirect(\"reservation_update\", reservation_id) form.save() return redirect(\"hotel_detail\", reservation.room.hotel.id) else: form = ReservationForm(instance=reservation) return render( request, \"reservation_update.html\", {\"form\": form, \"reservation\": reservation}, ) Description : Handles updating an existing reservation. Reservation Delete @login_required(login_url='/login/') def reservation_delete(request, reservation_id): reservation = get_object_or_404(Reservation, id=reservation_id, passenger=request.user) if request.method == \"POST\": reservation.delete() return redirect(\"hotel_detail\", reservation.room.hotel.id) else: return render( request, \"reservation_delete.html\", {\"reservation\": reservation}, ) Description : Handles deleting an existing reservation for the logged-in user. Now review the urls.py","title":"Views"},{"location":"Lab2/views/#viewspy","text":"","title":"views.py"},{"location":"Lab2/views/#register-user","text":"def register(request): if request.method == \"POST\": user_form = RegistrationForm(request.POST) if user_form.is_valid(): user = user_form.save() user.set_password(user.password) user.save() return redirect(\"user_login\") else: user_form = RegistrationForm() return render(request, \"register.html\", {\"user_form\": user_form}) Description : Handles user registration. Validates the registration form, saves the user, and redirects to the login page upon successful registration.","title":"Register User"},{"location":"Lab2/views/#user-login","text":"def user_login(request): if request.method == \"POST\": user_form = LoginForm(request.POST) username = user_form.data.get(\"username\") password = user_form.data.get(\"password\") user = authenticate(username=username, password=password) if user is None: return redirect(\"user_login\") login(request, user) return redirect(\"hotel_list\") else: user_form = LoginForm() return render(request, \"login.html\", {\"user_form\": user_form}) Description : Manages user login. Authenticates the user, logs them in, and redirects to the hotel list upon successful login.","title":"User Login"},{"location":"Lab2/views/#user-logout","text":"def user_logout(request): logout(request) return redirect(\"user_login\") Description : Logs the user out and redirects to the login page.","title":"User Logout"},{"location":"Lab2/views/#hotel-list","text":"def hotel_list(request): if request.method != \"GET\": return Http404(f\"Method {request.method} not supported\") capacity = request.GET.get(\"capacity\", None) city = request.GET.get('city', None) available_capacities = TypeOfRoom.objects.values_list('capacity', flat=True) available_cities = City.objects.values_list('name', flat=True) hotels = Hotel.objects.all() if capacity is not None: hotels = hotels.filter(rooms__type__capacity__gte=capacity) if city is not None: hotels = hotels.filter(city__name=city) return render( request, \"list.html\", { \"capacity\": capacity, \"city\": city, \"available_capacities\": available_capacities, \"available_cities\": available_cities, \"hotels\": hotels }, ) Description : Retrieves and displays a list of hotels based on optional filter criteria such as capacity and city.","title":"Hotel List"},{"location":"Lab2/views/#hotel-detail","text":"def hotel_detail(request, hotel_id): hotel = get_object_or_404(Hotel, pk=hotel_id) if request.method == \"POST\": comment_form = CommentForm(request.POST) if comment_form.is_valid(): if Reservation.objects.filter(passenger=request.user, room__hotel=hotel_id).exists(): comment = comment_form.save(commit=False) comment.hotel = Hotel.objects.get(id=hotel_id) comment.author = request.user comment.save() return redirect(\"hotel_detail\", hotel_id) else: rooms_set = Room.objects.filter(hotel__id=hotel_id).order_by(\"number\") rooms = [] for room in rooms_set: if not (Reservation.objects.filter(room=room, date_start__lte=datetime.date.today(), date_finish__gte=datetime.date.today()).exists()): rooms.append( { \"name\": f\"{room.number}\", \"capacity\": f\"{room.type.capacity}\", \"conveniences\": f\"{room.type.conveniences}\", \"cost\": f\"{room.type.cost}\" } ) comments = Comment.objects.filter(hotel=hotel) comment_form = CommentForm() return render( request, \"detail.html\", { \"hotel\": hotel, \"comments\": comments, \"comments_exists\": bool(comments.count()), \"rooms\": rooms, \"user\": request.user, \"comment_form\": comment_form }, ) Description : Displays detailed information about a specific hotel, including available rooms, comments, and handles adding comments and making reservations.","title":"Hotel Detail"},{"location":"Lab2/views/#reserve-room","text":"@login_required(login_url='/login/') def reserve_room(request, hotel_id): hotel = Hotel.objects.get(id=hotel_id) if request.method == \"POST\": room = Room.objects.filter(number=request.POST['room']).first() try: date_start = datetime.datetime.strptime(request.POST[\"date-start\"], \"%d.%m.%Y\") date_finish = datetime.datetime.strptime(request.POST[\"date-finish\"], \"%d.%m.%Y\") form = ReservationForm({\"room\": room, \"date_start\": date_start, \"date_finish\": date_finish}) if not form.is_valid(): return redirect(\"hotel_detail\", hotel_id) reservation = form.save(commit=False) reservation.passenger = request.user reservation.room = room reservation.save() except Exception: return redirect(\"hotel_detail\", hotel_id) return redirect(\"hotel_detail\", hotel_id) else: return render(request, \"reserve_room.html\", {'form' : ReservationForm(), \"hotel\": hotel}) Description : Allows authenticated users to reserve a room in a hotel.","title":"Reserve Room"},{"location":"Lab2/views/#reservations-for-user","text":"@login_required(login_url='/login/') def reservations_for_user(request): reservations = Reservation.objects.filter(passenger=request.user) return render(request, \"reservation_for_user.html\", {\"reservations\": reservations}) Description : Displays a list of reservations for the logged-in user.","title":"Reservations for User"},{"location":"Lab2/views/#reservation-update","text":"def reservation_update(request, reservation_id): reservation = get_object_or_404(Reservation, id=reservation_id) if request.method == \"POST\": form = ReservationForm(data=request.POST, instance=reservation) if not form.is_valid(): return redirect(\"reservation_update\", reservation_id) form.save() return redirect(\"hotel_detail\", reservation.room.hotel.id) else: form = ReservationForm(instance=reservation) return render( request, \"reservation_update.html\", {\"form\": form, \"reservation\": reservation}, ) Description : Handles updating an existing reservation.","title":"Reservation Update"},{"location":"Lab2/views/#reservation-delete","text":"@login_required(login_url='/login/') def reservation_delete(request, reservation_id): reservation = get_object_or_404(Reservation, id=reservation_id, passenger=request.user) if request.method == \"POST\": reservation.delete() return redirect(\"hotel_detail\", reservation.room.hotel.id) else: return render( request, \"reservation_delete.html\", {\"reservation\": reservation}, ) Description : Handles deleting an existing reservation for the logged-in user.","title":"Reservation Delete"},{"location":"Lab2/views/#now-review-the-urlspy","text":"","title":"Now review the urls.py"},{"location":"Lab2/prac2/overview/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2 \u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u0432\u0435\u0431\u0441\u0430\u0439\u0442 \u0441 \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438 \u0438 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430\u043c\u0438: \u041d\u0430 \u0441\u0430\u0439\u0442\u0435 \u043c\u044b \u043c\u043e\u0436\u0435\u043c: \u0421\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0438 \u043c\u0435\u043d\u044f\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\u0445 \u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u0423\u0434\u0430\u043b\u044f\u0442\u044c \u043c\u0430\u0448\u0438\u043d\u044b \u041e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0442\u044c \u0442\u0435 \u0436\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432","title":"Overview"},{"location":"Lab2/prac2/overview/#2","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2"},{"location":"Lab2/prac2/overview/#_1","text":"","title":"\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u0432\u0435\u0431\u0441\u0430\u0439\u0442 \u0441 \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438 \u0438 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430\u043c\u0438:"},{"location":"Lab2/prac2/overview/#_2","text":"\u0421\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0438 \u043c\u0435\u043d\u044f\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\u0445 \u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u0423\u0434\u0430\u043b\u044f\u0442\u044c \u043c\u0430\u0448\u0438\u043d\u044b \u041e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0442\u044c \u0442\u0435 \u0436\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432","title":"\u041d\u0430 \u0441\u0430\u0439\u0442\u0435 \u043c\u044b \u043c\u043e\u0436\u0435\u043c:"},{"location":"Lab3/models/","text":"models.py Company Model class Company(models.Model): name = models.CharField(max_length=300) Description : Represents a company with a name attribute. Product Model class Product(models.Model): code = models.CharField(max_length=100, unique=True) name = models.CharField(max_length=300) unit = models.CharField(max_length=100) shelf_life = models.IntegerField() def __str__(self): return self.name Description : Represents a product with attributes such as code, name, unit, and shelf life. The __str__ method returns the name of the product. BrokerCompany Model class BrokerCompany(models.Model): name = models.CharField(max_length=100) income = models.FloatField(default=0) def __str__(self): return self.name Description : Represents a broker company with attributes including name and income. The __str__ method returns the name of the broker company. Broker Model class Broker(models.Model): name = models.CharField(max_length=100) company = models.ForeignKey(BrokerCompany, related_name='brokers', on_delete=models.CASCADE) income = models.FloatField(default=0) def __str__(self): return self.name Description : Represents a broker with attributes including name, associated company (linked to BrokerCompany model), and income. The __str__ method returns the name of the broker. Consignment Model class Consignment(models.Model): broker = models.ForeignKey(Broker, related_name='what_sold', on_delete=models.CASCADE) date_sold = models.DateField() num = models.CharField(max_length=20) cost = models.FloatField() prepayment = models.BooleanField() Description : Represents a consignment with attributes including associated broker (linked to Broker model), date sold, consignment number, cost, and prepayment status. ProductByCompany Model class ProductByCompany(models.Model): company = models.ForeignKey(Company, related_name='what_produced', on_delete=models.CASCADE) product = models.ForeignKey(Product, related_name='produced_by', on_delete=models.CASCADE) consignment = models.ForeignKey(Consignment, related_name='what_in', on_delete=models.CASCADE) created = models.DateField() def __str__(self): return f\"{self.product.name} by {self.company.name}\" Description : Represents the relationship between a company, a product, and a consignment. The __str__ method returns a string representation of the product produced by the company. Serializers next","title":"Models"},{"location":"Lab3/models/#modelspy","text":"","title":"models.py"},{"location":"Lab3/models/#company-model","text":"class Company(models.Model): name = models.CharField(max_length=300) Description : Represents a company with a name attribute.","title":"Company Model"},{"location":"Lab3/models/#product-model","text":"class Product(models.Model): code = models.CharField(max_length=100, unique=True) name = models.CharField(max_length=300) unit = models.CharField(max_length=100) shelf_life = models.IntegerField() def __str__(self): return self.name Description : Represents a product with attributes such as code, name, unit, and shelf life. The __str__ method returns the name of the product.","title":"Product Model"},{"location":"Lab3/models/#brokercompany-model","text":"class BrokerCompany(models.Model): name = models.CharField(max_length=100) income = models.FloatField(default=0) def __str__(self): return self.name Description : Represents a broker company with attributes including name and income. The __str__ method returns the name of the broker company.","title":"BrokerCompany Model"},{"location":"Lab3/models/#broker-model","text":"class Broker(models.Model): name = models.CharField(max_length=100) company = models.ForeignKey(BrokerCompany, related_name='brokers', on_delete=models.CASCADE) income = models.FloatField(default=0) def __str__(self): return self.name Description : Represents a broker with attributes including name, associated company (linked to BrokerCompany model), and income. The __str__ method returns the name of the broker.","title":"Broker Model"},{"location":"Lab3/models/#consignment-model","text":"class Consignment(models.Model): broker = models.ForeignKey(Broker, related_name='what_sold', on_delete=models.CASCADE) date_sold = models.DateField() num = models.CharField(max_length=20) cost = models.FloatField() prepayment = models.BooleanField() Description : Represents a consignment with attributes including associated broker (linked to Broker model), date sold, consignment number, cost, and prepayment status.","title":"Consignment Model"},{"location":"Lab3/models/#productbycompany-model","text":"class ProductByCompany(models.Model): company = models.ForeignKey(Company, related_name='what_produced', on_delete=models.CASCADE) product = models.ForeignKey(Product, related_name='produced_by', on_delete=models.CASCADE) consignment = models.ForeignKey(Consignment, related_name='what_in', on_delete=models.CASCADE) created = models.DateField() def __str__(self): return f\"{self.product.name} by {self.company.name}\" Description : Represents the relationship between a company, a product, and a consignment. The __str__ method returns a string representation of the product produced by the company.","title":"ProductByCompany Model"},{"location":"Lab3/models/#serializers-next","text":"","title":"Serializers next"},{"location":"Lab3/overview/","text":"Lab 3 Here's a DB diagram to understand relations better Let's start a server and proceed to a Swagger API Here we can see all the queries that are created by our ViewSets Let's check the GET request Then POST now we're checking via GET whether new data has been added Finally, let's check PATCH Now I suggest you review the full code","title":"Overview"},{"location":"Lab3/overview/#lab-3","text":"","title":"Lab 3"},{"location":"Lab3/overview/#heres-a-db-diagram-to-understand-relations-better","text":"","title":"Here's a DB diagram to understand relations better"},{"location":"Lab3/overview/#lets-start-a-server-and-proceed-to-a-swagger-api","text":"Here we can see all the queries that are created by our ViewSets","title":"Let's start a server and proceed to a Swagger API"},{"location":"Lab3/overview/#lets-check-the-get-request","text":"","title":"Let's check the GET request"},{"location":"Lab3/overview/#then-post","text":"now we're checking via GET whether new data has been added","title":"Then POST"},{"location":"Lab3/overview/#finally-lets-check-patch","text":"Now I suggest you review the full code","title":"Finally, let's check PATCH"},{"location":"Lab3/serializers/","text":"serializers.py Product Serializer class ProductSerialiser(serializers.ModelSerializer): class Meta: model = Product fields = \"__all__\" Description : Serializes the Product model, including all fields. Count Product Serializer class CountProductSerialiser(serializers.ModelSerializer): count = serializers.SerializerMethodField() class Meta: model = Product fields = [\"count\"] def get_count(self, obj): return ProductByCompany.objects.filter(product=obj.id, created__lt=self.context[\"date\"]).count() Description : Serializes the Product model, including a custom count field based on related ProductByCompany instances filtered by date. Date Serializer class DateSerializer(serializers.Serializer): date = serializers.DateField(default=datetime.date.today()) class Meta: fields = ['date'] Description : Serializer for a date field with a default value of today. Product By Company Serializer class ProductByCompanySerialiser(serializers.ModelSerializer): class Meta: model = ProductByCompany fields = \"__all__\" Description : Serializes the ProductByCompany model, including all fields. Company Serializer class CompanySerialiser(serializers.ModelSerializer): class Meta: model = Company fields = \"__all__\" Description : Serializes the Company model, including all fields. Broker Serializer class BrokerSerialiser(serializers.ModelSerializer): class Meta: model = Broker fields = \"__all__\" Description : Serializes the Broker model, including all fields. Count Broker Salary Serializer class CountBrokerSalarySerializer(serializers.ModelSerializer): salary = serializers.SerializerMethodField() class Meta: model = Broker fields = ['id', 'name', 'salary'] def get_salary(self, obj): count = 0 for c in Consignment.objects.filter(broker=obj.id): count = ProductByCompany.objects.filter(consignment=c.id).count() * c.cost return count Description : Serializes the Broker model, including a custom salary field calculated based on related Consignment and ProductByCompany instances. Broker Company Serializer class BrokerCompanySerialiser(serializers.ModelSerializer): class Meta: model = BrokerCompany fields = \"__all__\" Description : Serializes the BrokerCompany model, including all fields. Consignment Serializer class ConsignmentSerialiser(serializers.ModelSerializer): class Meta: model = Consignment fields = \"__all__\" Description : Serializes the Consignment model, including all fields. Broker With Company Serializer class BrokerWithCompanySerializer(serializers.ModelSerializer): company_name = serializers.CharField(source='company.name', read_only=True) class Meta: model = Broker fields = ['id', 'name', 'income', 'company', 'company_name'] Description : Serializes the Broker model, including a custom field company_name sourced from the related company field. Views are up next","title":"Serializers"},{"location":"Lab3/serializers/#serializerspy","text":"","title":"serializers.py"},{"location":"Lab3/serializers/#product-serializer","text":"class ProductSerialiser(serializers.ModelSerializer): class Meta: model = Product fields = \"__all__\" Description : Serializes the Product model, including all fields.","title":"Product Serializer"},{"location":"Lab3/serializers/#count-product-serializer","text":"class CountProductSerialiser(serializers.ModelSerializer): count = serializers.SerializerMethodField() class Meta: model = Product fields = [\"count\"] def get_count(self, obj): return ProductByCompany.objects.filter(product=obj.id, created__lt=self.context[\"date\"]).count() Description : Serializes the Product model, including a custom count field based on related ProductByCompany instances filtered by date.","title":"Count Product Serializer"},{"location":"Lab3/serializers/#date-serializer","text":"class DateSerializer(serializers.Serializer): date = serializers.DateField(default=datetime.date.today()) class Meta: fields = ['date'] Description : Serializer for a date field with a default value of today.","title":"Date Serializer"},{"location":"Lab3/serializers/#product-by-company-serializer","text":"class ProductByCompanySerialiser(serializers.ModelSerializer): class Meta: model = ProductByCompany fields = \"__all__\" Description : Serializes the ProductByCompany model, including all fields.","title":"Product By Company Serializer"},{"location":"Lab3/serializers/#company-serializer","text":"class CompanySerialiser(serializers.ModelSerializer): class Meta: model = Company fields = \"__all__\" Description : Serializes the Company model, including all fields.","title":"Company Serializer"},{"location":"Lab3/serializers/#broker-serializer","text":"class BrokerSerialiser(serializers.ModelSerializer): class Meta: model = Broker fields = \"__all__\" Description : Serializes the Broker model, including all fields.","title":"Broker Serializer"},{"location":"Lab3/serializers/#count-broker-salary-serializer","text":"class CountBrokerSalarySerializer(serializers.ModelSerializer): salary = serializers.SerializerMethodField() class Meta: model = Broker fields = ['id', 'name', 'salary'] def get_salary(self, obj): count = 0 for c in Consignment.objects.filter(broker=obj.id): count = ProductByCompany.objects.filter(consignment=c.id).count() * c.cost return count Description : Serializes the Broker model, including a custom salary field calculated based on related Consignment and ProductByCompany instances.","title":"Count Broker Salary Serializer"},{"location":"Lab3/serializers/#broker-company-serializer","text":"class BrokerCompanySerialiser(serializers.ModelSerializer): class Meta: model = BrokerCompany fields = \"__all__\" Description : Serializes the BrokerCompany model, including all fields.","title":"Broker Company Serializer"},{"location":"Lab3/serializers/#consignment-serializer","text":"class ConsignmentSerialiser(serializers.ModelSerializer): class Meta: model = Consignment fields = \"__all__\" Description : Serializes the Consignment model, including all fields.","title":"Consignment Serializer"},{"location":"Lab3/serializers/#broker-with-company-serializer","text":"class BrokerWithCompanySerializer(serializers.ModelSerializer): company_name = serializers.CharField(source='company.name', read_only=True) class Meta: model = Broker fields = ['id', 'name', 'income', 'company', 'company_name'] Description : Serializes the Broker model, including a custom field company_name sourced from the related company field.","title":"Broker With Company Serializer"},{"location":"Lab3/serializers/#views-are-up-next","text":"","title":"Views are up next"},{"location":"Lab3/views/","text":"views.py Consignment ViewSet class ConsignmentViewSet(viewsets.ModelViewSet): queryset = Consignment.objects.all() serializer_class = serializers.ConsignmentSerialiser permission_classes = [IsAuthenticated] Description : ViewSet for the Consignment model, allowing CRUD operations. Requires authentication. Company ViewSet class CompanyViewSet(viewsets.ModelViewSet): queryset = Company.objects.all() permission_classes = [IsAuthenticated] def get_serializer_class(self): if self.action == 'count_all': return serializers.DateSerializer else: return serializers.CompanySerialiser @action(detail=False, methods=[\"GET\"]) def sold_most(self, request): # ... (method description) Description : ViewSet for the Company model, allowing CRUD operations. Provides additional actions for counting all and finding the company that sold the most. BrokerCompany ViewSet class BrokerCompanyViewSet(viewsets.ModelViewSet): queryset = BrokerCompany.objects.all() serializer_class = serializers.BrokerCompanySerialiser permission_classes = [IsAuthenticated] @action(detail=True, methods=[\"GET\"]) def never_sold(self, request, pk=None): # ... (method description) @action(detail=True, methods=[\"GET\"]) def salaries(self, request, pk=None): # ... (method description) Description : ViewSet for the BrokerCompany model, allowing CRUD operations. Provides additional actions for finding products never sold and calculating broker salaries. Broker ViewSet class BrokerViewSet(viewsets.ModelViewSet): queryset = Broker.objects.all() serializer_class = serializers.BrokerSerialiser permission_classes = [IsAuthenticated] Description : ViewSet for the Broker model, allowing CRUD operations. Requires authentication. Product ViewSet class ProductViewSet(viewsets.ModelViewSet): queryset = Product.objects.all() permission_classes = [IsAuthenticated] def get_serializer_class(self): if self.action in ['count_all']: return serializers.DateSerializer else: return serializers.ProductSerialiser @action(detail=False, methods=[\"POST\"]) def count_all(self, request): # ... (method description) Description : ViewSet for the Product model, allowing CRUD operations. Provides additional actions for counting all products. ProductByCompany ViewSet class ProductByCompanyViewSet(viewsets.ModelViewSet): queryset = ProductByCompany.objects.all() serializer_class = serializers.ProductByCompanySerialiser permission_classes = [IsAuthenticated] @action(detail=False, methods=[\"GET\"]) def expired(self, request): # ... (method description) Description : ViewSet for the ProductByCompany model, allowing CRUD operations. Provides additional actions for finding expired products. BrokerWithCompany ViewSet class BrokerWithCompanyViewSet(viewsets.ModelViewSet): queryset = Broker.objects.all() serializer_class = serializers.BrokerWithCompanySerializer permission_classes = [IsAuthenticated] Description : ViewSet for the Broker model with additional information about the associated company. Allows CRUD operations. Requires authentication.","title":"Views"},{"location":"Lab3/views/#viewspy","text":"","title":"views.py"},{"location":"Lab3/views/#consignment-viewset","text":"class ConsignmentViewSet(viewsets.ModelViewSet): queryset = Consignment.objects.all() serializer_class = serializers.ConsignmentSerialiser permission_classes = [IsAuthenticated] Description : ViewSet for the Consignment model, allowing CRUD operations. Requires authentication.","title":"Consignment ViewSet"},{"location":"Lab3/views/#company-viewset","text":"class CompanyViewSet(viewsets.ModelViewSet): queryset = Company.objects.all() permission_classes = [IsAuthenticated] def get_serializer_class(self): if self.action == 'count_all': return serializers.DateSerializer else: return serializers.CompanySerialiser @action(detail=False, methods=[\"GET\"]) def sold_most(self, request): # ... (method description) Description : ViewSet for the Company model, allowing CRUD operations. Provides additional actions for counting all and finding the company that sold the most.","title":"Company ViewSet"},{"location":"Lab3/views/#brokercompany-viewset","text":"class BrokerCompanyViewSet(viewsets.ModelViewSet): queryset = BrokerCompany.objects.all() serializer_class = serializers.BrokerCompanySerialiser permission_classes = [IsAuthenticated] @action(detail=True, methods=[\"GET\"]) def never_sold(self, request, pk=None): # ... (method description) @action(detail=True, methods=[\"GET\"]) def salaries(self, request, pk=None): # ... (method description) Description : ViewSet for the BrokerCompany model, allowing CRUD operations. Provides additional actions for finding products never sold and calculating broker salaries.","title":"BrokerCompany ViewSet"},{"location":"Lab3/views/#broker-viewset","text":"class BrokerViewSet(viewsets.ModelViewSet): queryset = Broker.objects.all() serializer_class = serializers.BrokerSerialiser permission_classes = [IsAuthenticated] Description : ViewSet for the Broker model, allowing CRUD operations. Requires authentication.","title":"Broker ViewSet"},{"location":"Lab3/views/#product-viewset","text":"class ProductViewSet(viewsets.ModelViewSet): queryset = Product.objects.all() permission_classes = [IsAuthenticated] def get_serializer_class(self): if self.action in ['count_all']: return serializers.DateSerializer else: return serializers.ProductSerialiser @action(detail=False, methods=[\"POST\"]) def count_all(self, request): # ... (method description) Description : ViewSet for the Product model, allowing CRUD operations. Provides additional actions for counting all products.","title":"Product ViewSet"},{"location":"Lab3/views/#productbycompany-viewset","text":"class ProductByCompanyViewSet(viewsets.ModelViewSet): queryset = ProductByCompany.objects.all() serializer_class = serializers.ProductByCompanySerialiser permission_classes = [IsAuthenticated] @action(detail=False, methods=[\"GET\"]) def expired(self, request): # ... (method description) Description : ViewSet for the ProductByCompany model, allowing CRUD operations. Provides additional actions for finding expired products.","title":"ProductByCompany ViewSet"},{"location":"Lab3/views/#brokerwithcompany-viewset","text":"class BrokerWithCompanyViewSet(viewsets.ModelViewSet): queryset = Broker.objects.all() serializer_class = serializers.BrokerWithCompanySerializer permission_classes = [IsAuthenticated] Description : ViewSet for the Broker model with additional information about the associated company. Allows CRUD operations. Requires authentication.","title":"BrokerWithCompany ViewSet"},{"location":"Lab3/prac3/overview/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3.1 1. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435: 2. \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u0421\u0430\u0448\u0430\u201d \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) 3. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b c \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f (\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043e\u0434\u043d\u0438 \u0438 \u0442\u0435 \u0436\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043c\u0435\u0442\u043e\u0434\u043e\u043c .distinct() \u0412 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 3.2 \u0431\u044b\u043b\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0431\u0430\u0437\u0430 Warriors, \u0432\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a \u043d\u0435\u0439:","title":"Overview"},{"location":"Lab3/prac3/overview/#31","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3.1"},{"location":"Lab3/prac3/overview/#1","text":"","title":"1."},{"location":"Lab3/prac3/overview/#6-7-5-6-1-3-python-","text":"","title":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432."},{"location":"Lab3/prac3/overview/#_1","text":"","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435:"},{"location":"Lab3/prac3/overview/#2","text":"","title":"2."},{"location":"Lab3/prac3/overview/#_2","text":"\u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u0421\u0430\u0448\u0430\u201d \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435)","title":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e:"},{"location":"Lab3/prac3/overview/#3","text":"","title":"3."},{"location":"Lab3/prac3/overview/#c","text":"\u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f (\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043e\u0434\u043d\u0438 \u0438 \u0442\u0435 \u0436\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043c\u0435\u0442\u043e\u0434\u043e\u043c .distinct() \u0412 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 3.2 \u0431\u044b\u043b\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0431\u0430\u0437\u0430 Warriors, \u0432\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a \u043d\u0435\u0439:","title":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b c \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432:"},{"location":"Lab4/brokers/","text":"Brokers.vue Brokers Page Component <template> <div> <h1>Brokers Page</h1> <!-- Sorting options --> <label>Sort By:</label> <select v-model=\"sortBy\" @change=\"sortBrokers\"> <option value=\"name\">Name</option> <option value=\"income\">Income</option> </select> <!-- Search input --> <label>Search:</label> <input v-model=\"searchTerm\" @input=\"filterBrokers\" /> <!-- List of brokers --> <ul> <li v-for=\"broker in filteredBrokers\" :key=\"broker.id\"> {{ broker.name }} - Income: {{ broker.income }} </li> </ul> </div> </template> Description : Vue template for the Brokers page component. Displays a title, sorting options, a search input, and a list of brokers. Brokers Page Component Script <script> import axios from 'axios'; export default { name: 'Brokers', data() { return { brokers: [], sortBy: 'name', searchTerm: '', }; }, computed: { sortedBrokers() { return this.brokers.slice().sort((a, b) => { if (this.sortBy === 'name') { return a.name.localeCompare(b.name); } else if (this.sortBy === 'income') { return b.income - a.income; } return 0; }); }, filteredBrokers() { const search = this.searchTerm.toLowerCase(); return this.sortedBrokers.filter( broker => broker.name.toLowerCase().includes(search) ); }, }, methods: { async fetchBrokers() { try { const response = await axios.get('http://127.0.0.1:8000/main/brokers/', { headers: { Authorization: `Token ${localStorage.getItem('access_token')}`, }, }); this.brokers = response.data; } catch (error) { console.error('Error fetching broker data:', error); } }, sortBrokers() { // Triggered when sorting option changes }, filterBrokers() { // Triggered when search term changes }, }, created() { this.fetchBrokers(); }, }; </script> Description : Vue script for the Brokers page component. Manages data, computed properties, methods for fetching, sorting, and filtering brokers. Moving on to the Producers.vue","title":"Brokers"},{"location":"Lab4/brokers/#brokersvue","text":"","title":"Brokers.vue"},{"location":"Lab4/brokers/#brokers-page-component","text":"<template> <div> <h1>Brokers Page</h1> <!-- Sorting options --> <label>Sort By:</label> <select v-model=\"sortBy\" @change=\"sortBrokers\"> <option value=\"name\">Name</option> <option value=\"income\">Income</option> </select> <!-- Search input --> <label>Search:</label> <input v-model=\"searchTerm\" @input=\"filterBrokers\" /> <!-- List of brokers --> <ul> <li v-for=\"broker in filteredBrokers\" :key=\"broker.id\"> {{ broker.name }} - Income: {{ broker.income }} </li> </ul> </div> </template> Description : Vue template for the Brokers page component. Displays a title, sorting options, a search input, and a list of brokers.","title":"Brokers Page Component"},{"location":"Lab4/brokers/#brokers-page-component-script","text":"<script> import axios from 'axios'; export default { name: 'Brokers', data() { return { brokers: [], sortBy: 'name', searchTerm: '', }; }, computed: { sortedBrokers() { return this.brokers.slice().sort((a, b) => { if (this.sortBy === 'name') { return a.name.localeCompare(b.name); } else if (this.sortBy === 'income') { return b.income - a.income; } return 0; }); }, filteredBrokers() { const search = this.searchTerm.toLowerCase(); return this.sortedBrokers.filter( broker => broker.name.toLowerCase().includes(search) ); }, }, methods: { async fetchBrokers() { try { const response = await axios.get('http://127.0.0.1:8000/main/brokers/', { headers: { Authorization: `Token ${localStorage.getItem('access_token')}`, }, }); this.brokers = response.data; } catch (error) { console.error('Error fetching broker data:', error); } }, sortBrokers() { // Triggered when sorting option changes }, filterBrokers() { // Triggered when search term changes }, }, created() { this.fetchBrokers(); }, }; </script> Description : Vue script for the Brokers page component. Manages data, computed properties, methods for fetching, sorting, and filtering brokers.","title":"Brokers Page Component Script"},{"location":"Lab4/brokers/#moving-on-to-the-producersvue","text":"","title":"Moving on to the Producers.vue"},{"location":"Lab4/consignments/","text":"Consignments.vue Consignments Page Component <template> <div> <h1>Consignments Page</h1> <label>Sort By:</label> <select v-model=\"sortBy\" @change=\"sortConsignments\"> <option value=\"date_sold\">Date Sold</option> <option value=\"cost\">Cost</option> </select> <label>Search:</label> <input v-model=\"searchTerm\" @input=\"filterConsignments\" /> <ul> <li v-for=\"consignment in filteredConsignments\" :key=\"consignment.id\"> Date Sold: {{ consignment.date_sold }} - Cost: {{ consignment.cost }} </li> </ul> <div> <h2>Add New Consignment</h2> <form @submit.prevent=\"addConsignment\"> <label for=\"dateSold\">Date Sold:</label> <input type=\"date\" v-model=\"newConsignment.date_sold\" required /> <label for=\"num\">Number:</label> <input type=\"text\" v-model=\"newConsignment.num\" required /> <label for=\"cost\">Cost:</label> <input type=\"number\" v-model=\"newConsignment.cost\" required /> <label for=\"prepayment\">Prepayment:</label> <input type=\"checkbox\" v-model=\"newConsignment.prepayment\" /> <label for=\"broker\">Broker ID:</label> <input type=\"number\" v-model=\"newConsignment.broker\" required /> <button type=\"submit\">Add Consignment</button> </form> </div> </div> </template> Description : Vue template for the Consignments page component. Displays a title, sorting options, a search input, a list of consignments, and a form to add new consignments. Consignments Page Component Script <script> import axios from 'axios'; export default { name: 'Consignments', data() { return { consignments: [], sortBy: 'date_sold', searchTerm: '', newConsignment: { date_sold: '', num: '', cost: 0, prepayment: false, broker: 0, }, }; }, computed: { sortedConsignments() { return this.consignments.slice().sort((a, b) => { if (this.sortBy === 'date_sold') { return new Date(b.date_sold) - new Date(a.date_sold); } else if (this.sortBy === 'cost') { return b.cost - a.cost; } return 0; }); }, filteredConsignments() { const search = this.searchTerm.toLowerCase(); return this.sortedConsignments.filter( consignment => consignment.date_sold.toLowerCase().includes(search) ); }, }, methods: { async fetchConsignments() { try { const response = await axios.get('http://127.0.0.1:8000/main/consignments/', { headers: { Authorization: `Token ${localStorage.getItem('access_token')}`, }, }); this.consignments = response.data; } catch (error) { console.error('Error fetching consignment data:', error); } }, sortConsignments() { // Triggered when sorting option changes }, filterConsignments() { // Triggered when search term changes }, async addConsignment() { try { const response = await axios.post('http://127.0.0.1:8000/main/consignments/', this.newConsignment, { headers: { Authorization: `Token ${localStorage.getItem('access_token')}`, }, }); console.log('Consignment added successfully:', response.data); } catch (error) { console.error('Error adding consignment:', error.response.data); } }, }, created() { this.fetchConsignments(); }, }; </script> Description : Vue script for the Consignments page component. Manages data, computed properties, methods for fetching, sorting, filtering, and adding consignments.","title":"Consignments"},{"location":"Lab4/consignments/#consignmentsvue","text":"","title":"Consignments.vue"},{"location":"Lab4/consignments/#consignments-page-component","text":"<template> <div> <h1>Consignments Page</h1> <label>Sort By:</label> <select v-model=\"sortBy\" @change=\"sortConsignments\"> <option value=\"date_sold\">Date Sold</option> <option value=\"cost\">Cost</option> </select> <label>Search:</label> <input v-model=\"searchTerm\" @input=\"filterConsignments\" /> <ul> <li v-for=\"consignment in filteredConsignments\" :key=\"consignment.id\"> Date Sold: {{ consignment.date_sold }} - Cost: {{ consignment.cost }} </li> </ul> <div> <h2>Add New Consignment</h2> <form @submit.prevent=\"addConsignment\"> <label for=\"dateSold\">Date Sold:</label> <input type=\"date\" v-model=\"newConsignment.date_sold\" required /> <label for=\"num\">Number:</label> <input type=\"text\" v-model=\"newConsignment.num\" required /> <label for=\"cost\">Cost:</label> <input type=\"number\" v-model=\"newConsignment.cost\" required /> <label for=\"prepayment\">Prepayment:</label> <input type=\"checkbox\" v-model=\"newConsignment.prepayment\" /> <label for=\"broker\">Broker ID:</label> <input type=\"number\" v-model=\"newConsignment.broker\" required /> <button type=\"submit\">Add Consignment</button> </form> </div> </div> </template> Description : Vue template for the Consignments page component. Displays a title, sorting options, a search input, a list of consignments, and a form to add new consignments.","title":"Consignments Page Component"},{"location":"Lab4/consignments/#consignments-page-component-script","text":"<script> import axios from 'axios'; export default { name: 'Consignments', data() { return { consignments: [], sortBy: 'date_sold', searchTerm: '', newConsignment: { date_sold: '', num: '', cost: 0, prepayment: false, broker: 0, }, }; }, computed: { sortedConsignments() { return this.consignments.slice().sort((a, b) => { if (this.sortBy === 'date_sold') { return new Date(b.date_sold) - new Date(a.date_sold); } else if (this.sortBy === 'cost') { return b.cost - a.cost; } return 0; }); }, filteredConsignments() { const search = this.searchTerm.toLowerCase(); return this.sortedConsignments.filter( consignment => consignment.date_sold.toLowerCase().includes(search) ); }, }, methods: { async fetchConsignments() { try { const response = await axios.get('http://127.0.0.1:8000/main/consignments/', { headers: { Authorization: `Token ${localStorage.getItem('access_token')}`, }, }); this.consignments = response.data; } catch (error) { console.error('Error fetching consignment data:', error); } }, sortConsignments() { // Triggered when sorting option changes }, filterConsignments() { // Triggered when search term changes }, async addConsignment() { try { const response = await axios.post('http://127.0.0.1:8000/main/consignments/', this.newConsignment, { headers: { Authorization: `Token ${localStorage.getItem('access_token')}`, }, }); console.log('Consignment added successfully:', response.data); } catch (error) { console.error('Error adding consignment:', error.response.data); } }, }, created() { this.fetchConsignments(); }, }; </script> Description : Vue script for the Consignments page component. Manages data, computed properties, methods for fetching, sorting, filtering, and adding consignments.","title":"Consignments Page Component Script"},{"location":"Lab4/home/","text":"Home.vue Home Component <template> <div> <h1 class=\"title\">Stock, Click, and Two Smoking Barcodes</h1> </div> </template> Description : Vue template for the home component. Displays a title with a catchy phrase related to stock management. Home Component Script <script> export default { name: 'Home', }; </script> Description : Vue script for the home component. Provides the component name. Home Component Styles <style scoped> .title { text-align: center; margin-top: 50vh; transform: translateY(-50%); animation: fadeIn 1.5s ease-in-out; } @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } } </style> Description : Vue styles for the home component. Centers the title, adds a margin from the top, and includes a fadeIn animation for visual appeal. Brokers.vue next","title":"Home"},{"location":"Lab4/home/#homevue","text":"","title":"Home.vue"},{"location":"Lab4/home/#home-component","text":"<template> <div> <h1 class=\"title\">Stock, Click, and Two Smoking Barcodes</h1> </div> </template> Description : Vue template for the home component. Displays a title with a catchy phrase related to stock management.","title":"Home Component"},{"location":"Lab4/home/#home-component-script","text":"<script> export default { name: 'Home', }; </script> Description : Vue script for the home component. Provides the component name.","title":"Home Component Script"},{"location":"Lab4/home/#home-component-styles","text":"<style scoped> .title { text-align: center; margin-top: 50vh; transform: translateY(-50%); animation: fadeIn 1.5s ease-in-out; } @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } } </style> Description : Vue styles for the home component. Centers the title, adds a margin from the top, and includes a fadeIn animation for visual appeal.","title":"Home Component Styles"},{"location":"Lab4/home/#brokersvue-next","text":"","title":"Brokers.vue next"},{"location":"Lab4/login/","text":"Login.vue Login Component <template> <div class=\"container\"> <h2>\u0412\u043e\u0439\u0442\u0438</h2> <form @submit.prevent=\"loginUser\"> <label for=\"username\">\u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:</label> <input type=\"text\" id=\"username\" v-model=\"username\" required /> <label for=\"password\">\u041f\u0430\u0440\u043e\u043b\u044c:</label> <input type=\"password\" id=\"password\" v-model=\"password\" required /> <button type=\"submit\">\u0412\u043e\u0439\u0442\u0438</button> </form> </div> </template> Description : Vue template for the login component. Includes a form with input fields for username and password. Login Component Script <script> import axios from 'axios'; export default { data() { return { username: '', password: '', }; }, methods: { async loginUser() { try { const response = await axios.post('http://localhost:8000/auth/token/login/', { username: this.username, password: this.password, }); const accessToken = response.data.auth_token; localStorage.setItem('access_token', accessToken); console.log('Login successful. Token:', accessToken); // Set isAuthenticated to true in the root Vue instance this.$root.isAuthenticated = true; // Redirect the user to the profile page or another page this.$router.push('/profile'); console.log('Login successful. Token:', accessToken); } catch (error) { console.error('Login failed:', error.response.data); } }, }, }; </script> Description : Vue script for the login component. Defines the loginUser method to handle the form submission and make an API request to authenticate the user. Register.vue is next","title":"Login"},{"location":"Lab4/login/#loginvue","text":"","title":"Login.vue"},{"location":"Lab4/login/#login-component","text":"<template> <div class=\"container\"> <h2>\u0412\u043e\u0439\u0442\u0438</h2> <form @submit.prevent=\"loginUser\"> <label for=\"username\">\u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:</label> <input type=\"text\" id=\"username\" v-model=\"username\" required /> <label for=\"password\">\u041f\u0430\u0440\u043e\u043b\u044c:</label> <input type=\"password\" id=\"password\" v-model=\"password\" required /> <button type=\"submit\">\u0412\u043e\u0439\u0442\u0438</button> </form> </div> </template> Description : Vue template for the login component. Includes a form with input fields for username and password.","title":"Login Component"},{"location":"Lab4/login/#login-component-script","text":"<script> import axios from 'axios'; export default { data() { return { username: '', password: '', }; }, methods: { async loginUser() { try { const response = await axios.post('http://localhost:8000/auth/token/login/', { username: this.username, password: this.password, }); const accessToken = response.data.auth_token; localStorage.setItem('access_token', accessToken); console.log('Login successful. Token:', accessToken); // Set isAuthenticated to true in the root Vue instance this.$root.isAuthenticated = true; // Redirect the user to the profile page or another page this.$router.push('/profile'); console.log('Login successful. Token:', accessToken); } catch (error) { console.error('Login failed:', error.response.data); } }, }, }; </script> Description : Vue script for the login component. Defines the loginUser method to handle the form submission and make an API request to authenticate the user.","title":"Login Component Script"},{"location":"Lab4/login/#registervue-is-next","text":"","title":"Register.vue is next"},{"location":"Lab4/mainjs/","text":"main.js Vue App Initialization import { createApp } from 'vue'; import { createRouter, createWebHistory } from 'vue-router'; import 'bootstrap/dist/css/bootstrap.min.css'; import axios from 'axios'; import App from './App.vue'; Description : Initializes the Vue app, sets up routing, includes Bootstrap styles, and imports the Axios library. Axios Configuration axios.defaults.baseURL = 'http://127.0.0.1:8000/'; Description : Configures Axios to use 'http://127.0.0.1:8000/' as the base URL for API requests. Vue App and Router Configuration const app = createApp(App); app.config.globalProperties.isAuthenticated = false; const router = createRouter({ history: createWebHistory(), routes: [ { path: '/login', component: Login }, { path: '/register', component: Register }, { path: '/profile', component: Profile, meta: { requiresAuth: true } }, { path: '/', component: Home }, { path: '/brokers', component: Brokers, meta: { requiresAuth: true } }, { path: '/producers', component: Producers, meta: { requiresAuth: true } }, { path: '/products', component: Products, meta: { requiresAuth: true } }, { path: '/cosignments', component: Cosignments, meta: { requiresAuth: true } }, ], }); Description : Configures the Vue app and sets up routes for different components/pages, including authentication checks. Route Navigation Guard router.beforeEach((to, from, next) => { if (to.matched.some(record => record.meta.requiresAuth)) { if (!localStorage.getItem('access_token')) { next({ path: '/login', query: { redirect: to.fullPath }, }); } else { next(); } } else { next(); } }); Description : Defines a navigation guard to check if authentication is required for the route. Redirects to the login page if not authenticated. Mounting the Vue App app.use(router); app.mount('#app'); Description : Integrates the router into the Vue app and mounts it to the element with the ID 'app'. Login.vue is up next!","title":"Main.js"},{"location":"Lab4/mainjs/#mainjs","text":"","title":"main.js"},{"location":"Lab4/mainjs/#vue-app-initialization","text":"import { createApp } from 'vue'; import { createRouter, createWebHistory } from 'vue-router'; import 'bootstrap/dist/css/bootstrap.min.css'; import axios from 'axios'; import App from './App.vue'; Description : Initializes the Vue app, sets up routing, includes Bootstrap styles, and imports the Axios library.","title":"Vue App Initialization"},{"location":"Lab4/mainjs/#axios-configuration","text":"axios.defaults.baseURL = 'http://127.0.0.1:8000/'; Description : Configures Axios to use 'http://127.0.0.1:8000/' as the base URL for API requests.","title":"Axios Configuration"},{"location":"Lab4/mainjs/#vue-app-and-router-configuration","text":"const app = createApp(App); app.config.globalProperties.isAuthenticated = false; const router = createRouter({ history: createWebHistory(), routes: [ { path: '/login', component: Login }, { path: '/register', component: Register }, { path: '/profile', component: Profile, meta: { requiresAuth: true } }, { path: '/', component: Home }, { path: '/brokers', component: Brokers, meta: { requiresAuth: true } }, { path: '/producers', component: Producers, meta: { requiresAuth: true } }, { path: '/products', component: Products, meta: { requiresAuth: true } }, { path: '/cosignments', component: Cosignments, meta: { requiresAuth: true } }, ], }); Description : Configures the Vue app and sets up routes for different components/pages, including authentication checks.","title":"Vue App and Router Configuration"},{"location":"Lab4/mainjs/#route-navigation-guard","text":"router.beforeEach((to, from, next) => { if (to.matched.some(record => record.meta.requiresAuth)) { if (!localStorage.getItem('access_token')) { next({ path: '/login', query: { redirect: to.fullPath }, }); } else { next(); } } else { next(); } }); Description : Defines a navigation guard to check if authentication is required for the route. Redirects to the login page if not authenticated.","title":"Route Navigation Guard"},{"location":"Lab4/mainjs/#mounting-the-vue-app","text":"app.use(router); app.mount('#app'); Description : Integrates the router into the Vue app and mounts it to the element with the ID 'app'.","title":"Mounting the Vue App"},{"location":"Lab4/mainjs/#loginvue-is-up-next","text":"","title":"Login.vue is up next!"},{"location":"Lab4/navbar/","text":"Navbar.vue Navbar Component <template> <header> <h1 class=\"logo\">Stock&Lock</h1> <nav> <router-link to=\"/\" class=\"nav-link\" :class=\"{ 'active': $route.path === '/' }\">Home</router-link> <router-link v-if=\"!isAuthPage()\" to=\"/brokers\" class=\"nav-link\" :class=\"{ 'active': $route.path === '/brokers' }\">Brokers</router-link> <router-link v-if=\"!isAuthPage()\" to=\"/producers\" class=\"nav-link\" :class=\"{ 'active': $route.path === '/producers' }\">Producers</router-link> <router-link v-if=\"!isAuthPage()\" to=\"/products\" class=\"nav-link\" :class=\"{ 'active': $route.path === '/products' }\">Products</router-link> <router-link v-if=\"!isAuthPage()\" to=\"/cosignments\" class=\"nav-link\" :class=\"{ 'active': $route.path === '/cosignments' }\">Cosignments</router-link> <router-link v-if=\"!isAuthenticated\" to=\"/login\" class=\"nav-link\" :class=\"{ 'active': $route.path === '/login' }\">Login</router-link> <router-link v-if=\"!isAuthenticated\" to=\"/register\" class=\"nav-link\" :class=\"{ 'active': $route.path === '/register' }\">Register</router-link> <router-link v-if=\"isAuthenticated\" to=\"/profile\" class=\"nav-link\" :class=\"{ 'active': $route.path === '/profile' }\">Profile</router-link> <button v-if=\"isAuthenticated\" @click=\"logout\" class=\"nav-link logout-button\">Logout</button> </nav> </header> </template> Description : Vue template for the navbar component. Displays the site logo, navigation links, and authentication-related buttons. Navbar Component Script <script> export default { name: 'Navbar', data() { return { isAuthenticated: false, }; }, methods: { isAuthPage() { const authPages = ['/login', '/register']; return authPages.includes(this.$route.path); }, logout() { // Clear authentication token from local storage localStorage.removeItem('access_token'); // Update the isAuthenticated status this.isAuthenticated = false; // Redirect to the login page this.$router.push('/login'); }, }, created() { // Check if the user is already authenticated this.isAuthenticated = localStorage.getItem('access_token') !== null; }, }; </script> Description : Vue script for the navbar component. Manages authentication status and provides methods for logging out. Navbar Component Styles <style scoped> header { background-color: #282828; color: #dbd8d8; padding: 10px 20px; display: flex; justify-content: space-between; align-items: center; } .logo { margin: 0; color: #dbd8d8; } nav { display: flex; } .nav-link { text-decoration: none; color: #6c6c6c; font-size: 1.2em; padding: 10px; border: none; cursor: pointer; font-size: 1.2em; border-radius: 4px; margin-left: 10px; transition: color 0.3s; } .nav-link:hover, .active { text-decoration: underline; color: #9c9c9c; } .logout-button { background-color: #4d4d4d; color: #767676; padding: 10px; border: none; cursor: pointer; font-size: 1.2em; border-radius: 4px; margin-left: 10px; transition: color 0.3s; } .logout-button:hover { color: #f8fa87; text-decoration: underline; } </style> Description : Vue styles for the navbar component. Defines the appearance of the header, logo, navigation links, and buttons. Home.vue is up next!","title":"Navbar"},{"location":"Lab4/navbar/#navbarvue","text":"","title":"Navbar.vue"},{"location":"Lab4/navbar/#navbar-component","text":"<template> <header> <h1 class=\"logo\">Stock&Lock</h1> <nav> <router-link to=\"/\" class=\"nav-link\" :class=\"{ 'active': $route.path === '/' }\">Home</router-link> <router-link v-if=\"!isAuthPage()\" to=\"/brokers\" class=\"nav-link\" :class=\"{ 'active': $route.path === '/brokers' }\">Brokers</router-link> <router-link v-if=\"!isAuthPage()\" to=\"/producers\" class=\"nav-link\" :class=\"{ 'active': $route.path === '/producers' }\">Producers</router-link> <router-link v-if=\"!isAuthPage()\" to=\"/products\" class=\"nav-link\" :class=\"{ 'active': $route.path === '/products' }\">Products</router-link> <router-link v-if=\"!isAuthPage()\" to=\"/cosignments\" class=\"nav-link\" :class=\"{ 'active': $route.path === '/cosignments' }\">Cosignments</router-link> <router-link v-if=\"!isAuthenticated\" to=\"/login\" class=\"nav-link\" :class=\"{ 'active': $route.path === '/login' }\">Login</router-link> <router-link v-if=\"!isAuthenticated\" to=\"/register\" class=\"nav-link\" :class=\"{ 'active': $route.path === '/register' }\">Register</router-link> <router-link v-if=\"isAuthenticated\" to=\"/profile\" class=\"nav-link\" :class=\"{ 'active': $route.path === '/profile' }\">Profile</router-link> <button v-if=\"isAuthenticated\" @click=\"logout\" class=\"nav-link logout-button\">Logout</button> </nav> </header> </template> Description : Vue template for the navbar component. Displays the site logo, navigation links, and authentication-related buttons.","title":"Navbar Component"},{"location":"Lab4/navbar/#navbar-component-script","text":"<script> export default { name: 'Navbar', data() { return { isAuthenticated: false, }; }, methods: { isAuthPage() { const authPages = ['/login', '/register']; return authPages.includes(this.$route.path); }, logout() { // Clear authentication token from local storage localStorage.removeItem('access_token'); // Update the isAuthenticated status this.isAuthenticated = false; // Redirect to the login page this.$router.push('/login'); }, }, created() { // Check if the user is already authenticated this.isAuthenticated = localStorage.getItem('access_token') !== null; }, }; </script> Description : Vue script for the navbar component. Manages authentication status and provides methods for logging out.","title":"Navbar Component Script"},{"location":"Lab4/navbar/#navbar-component-styles","text":"<style scoped> header { background-color: #282828; color: #dbd8d8; padding: 10px 20px; display: flex; justify-content: space-between; align-items: center; } .logo { margin: 0; color: #dbd8d8; } nav { display: flex; } .nav-link { text-decoration: none; color: #6c6c6c; font-size: 1.2em; padding: 10px; border: none; cursor: pointer; font-size: 1.2em; border-radius: 4px; margin-left: 10px; transition: color 0.3s; } .nav-link:hover, .active { text-decoration: underline; color: #9c9c9c; } .logout-button { background-color: #4d4d4d; color: #767676; padding: 10px; border: none; cursor: pointer; font-size: 1.2em; border-radius: 4px; margin-left: 10px; transition: color 0.3s; } .logout-button:hover { color: #f8fa87; text-decoration: underline; } </style> Description : Vue styles for the navbar component. Defines the appearance of the header, logo, navigation links, and buttons.","title":"Navbar Component Styles"},{"location":"Lab4/navbar/#homevue-is-up-next","text":"","title":"Home.vue is up next!"},{"location":"Lab4/overview/","text":"Lab 4 In this project we use database from Lab 3 Let's take a look at our website: Firstly, we get to the Home page, but if we try to navigate somewhere else, we will be redirected to the Login page, since we are not logged in Let's create an account After logging in we will be redirected to the Profile page Here we can change the info if needed Let's navigate to the brokers page Here we can filter available brokers by income or name and search by name Proceed to the producers page We can search producer companies by name Moving on to the products page Here we can filter our products by code, shelf life and weight, we can also search products by name Finally, consignment page As we can see, it joins company, product and brokers together We can also filter by cost of the consignment or date and search by date Let's create new cosignment directly on this page New consignment has been created! Now proceed to review the code !","title":"Overview"},{"location":"Lab4/overview/#lab-4","text":"","title":"Lab 4"},{"location":"Lab4/overview/#in-this-project-we-use-database-from-lab-3","text":"","title":"In this project we use database from Lab 3"},{"location":"Lab4/overview/#lets-take-a-look-at-our-website","text":"Firstly, we get to the Home page, but if we try to navigate somewhere else, we will be redirected to the Login page, since we are not logged in","title":"Let's take a look at our website:"},{"location":"Lab4/overview/#lets-create-an-account","text":"","title":"Let's create an account"},{"location":"Lab4/overview/#after-logging-in-we-will-be-redirected-to-the-profile-page","text":"","title":"After logging in we will be redirected to the Profile page"},{"location":"Lab4/overview/#here-we-can-change-the-info-if-needed","text":"","title":"Here we can change the info if needed"},{"location":"Lab4/overview/#lets-navigate-to-the-brokers-page","text":"Here we can filter available brokers by income or name and search by name","title":"Let's navigate to the brokers page"},{"location":"Lab4/overview/#proceed-to-the-producers-page","text":"We can search producer companies by name","title":"Proceed to the producers page"},{"location":"Lab4/overview/#moving-on-to-the-products-page","text":"Here we can filter our products by code, shelf life and weight, we can also search products by name","title":"Moving on to the products page"},{"location":"Lab4/overview/#finally-consignment-page","text":"As we can see, it joins company, product and brokers together We can also filter by cost of the consignment or date and search by date","title":"Finally, consignment page"},{"location":"Lab4/overview/#lets-create-new-cosignment-directly-on-this-page","text":"New consignment has been created!","title":"Let's create new cosignment directly on this page"},{"location":"Lab4/overview/#now-proceed-to-review-the-code","text":"","title":"Now proceed to review the code!"},{"location":"Lab4/producers/","text":"Producers.vue Producers Companies Page Component <template> <div> <h1>Producers Companies Page</h1> <!-- Search input --> <label>Search by Name:</label> <input v-model=\"searchTerm\" @input=\"filterProducers\" /> <!-- List of producers --> <ul> <li v-for=\"producer in filteredProducers\" :key=\"producer.id\"> {{ producer.name }} </li> </ul> </div> </template> Description : Vue template for the Producers Companies page component. Displays a title, a search input, and a list of producers. Producers Companies Page Component Script <script> import axios from 'axios'; export default { name: 'Producers', data() { return { producers: [], searchTerm: '', }; }, computed: { filteredProducers() { const search = this.searchTerm.toLowerCase(); return this.producers.filter( producer => producer.name.toLowerCase().includes(search) ); }, }, methods: { async fetchProducers() { try { const response = await axios.get('http://127.0.0.1:8000/main/companies/', { headers: { Authorization: `Token ${localStorage.getItem('access_token')}`, }, }); this.producers = response.data; } catch (error) { console.error('Error fetching producer data:', error); } }, filterProducers() { // Triggered when search term changes }, }, created() { this.fetchProducers(); }, }; </script> Description : Vue script for the Producers Companies page component. Manages data, computed properties, methods for fetching and filtering producers. Products.vue is up next!","title":"Producers"},{"location":"Lab4/producers/#producersvue","text":"","title":"Producers.vue"},{"location":"Lab4/producers/#producers-companies-page-component","text":"<template> <div> <h1>Producers Companies Page</h1> <!-- Search input --> <label>Search by Name:</label> <input v-model=\"searchTerm\" @input=\"filterProducers\" /> <!-- List of producers --> <ul> <li v-for=\"producer in filteredProducers\" :key=\"producer.id\"> {{ producer.name }} </li> </ul> </div> </template> Description : Vue template for the Producers Companies page component. Displays a title, a search input, and a list of producers.","title":"Producers Companies Page Component"},{"location":"Lab4/producers/#producers-companies-page-component-script","text":"<script> import axios from 'axios'; export default { name: 'Producers', data() { return { producers: [], searchTerm: '', }; }, computed: { filteredProducers() { const search = this.searchTerm.toLowerCase(); return this.producers.filter( producer => producer.name.toLowerCase().includes(search) ); }, }, methods: { async fetchProducers() { try { const response = await axios.get('http://127.0.0.1:8000/main/companies/', { headers: { Authorization: `Token ${localStorage.getItem('access_token')}`, }, }); this.producers = response.data; } catch (error) { console.error('Error fetching producer data:', error); } }, filterProducers() { // Triggered when search term changes }, }, created() { this.fetchProducers(); }, }; </script> Description : Vue script for the Producers Companies page component. Manages data, computed properties, methods for fetching and filtering producers.","title":"Producers Companies Page Component Script"},{"location":"Lab4/producers/#productsvue-is-up-next","text":"","title":"Products.vue is up next!"},{"location":"Lab4/products/","text":"Products.vue Products Page Component <template> <div> <h1>Products Page</h1> <!-- Sorting options --> <label>Sort By:</label> <select v-model=\"sortBy\" @change=\"sortProducts\"> <option value=\"code\">Code</option> <option value=\"name\">Name</option> <option value=\"unit\">Unit</option> <option value=\"shelf_life\">Shelf Life</option> </select> <!-- Search input --> <label>Search by Code:</label> <input v-model=\"searchTerm\" @input=\"filterProducts\" /> <!-- List of products --> <ul> <li v-for=\"product in filteredProducts\" :key=\"product.id\"> {{ product.code }} - {{ product.name }} - {{ product.unit }} - {{ product.shelf_life }} </li> </ul> </div> </template> Description : Vue template for the Products page component. Displays a title, sorting options, a search input, and a list of products. Products Page Component Script <script> import axios from 'axios'; export default { name: 'Products', data() { return { products: [], sortBy: 'code', searchTerm: '', }; }, computed: { sortedProducts() { return this.products.slice().sort((a, b) => { if (this.sortBy === 'code') { return a.code.localeCompare(b.code); } else if (this.sortBy === 'name') { return a.name.localeCompare(b.name); } else if (this.sortBy === 'unit') { return a.unit.localeCompare(b.unit); } else if (this.sortBy === 'shelf_life') { return a.shelf_life - b.shelf_life; } return 0; }); }, filteredProducts() { const search = this.searchTerm.toLowerCase(); return this.sortedProducts.filter( product => product.code.toLowerCase().includes(search) ); }, }, methods: { async fetchProducts() { try { const response = await axios.get('http://127.0.0.1:8000/main/products/', { headers: { Authorization: `Token ${localStorage.getItem('access_token')}`, }, }); this.products = response.data; } catch (error) { console.error('Error fetching product data:', error); } }, sortProducts() { // Triggered when sorting option changes }, filterProducts() { // Triggered when search term changes }, }, created() { this.fetchProducts(); }, }; </script> Description : Vue script for the Products page component. Manages data, computed properties, methods for fetching and filtering products. Finally, let's review the Consignments.vue","title":"Products"},{"location":"Lab4/products/#productsvue","text":"","title":"Products.vue"},{"location":"Lab4/products/#products-page-component","text":"<template> <div> <h1>Products Page</h1> <!-- Sorting options --> <label>Sort By:</label> <select v-model=\"sortBy\" @change=\"sortProducts\"> <option value=\"code\">Code</option> <option value=\"name\">Name</option> <option value=\"unit\">Unit</option> <option value=\"shelf_life\">Shelf Life</option> </select> <!-- Search input --> <label>Search by Code:</label> <input v-model=\"searchTerm\" @input=\"filterProducts\" /> <!-- List of products --> <ul> <li v-for=\"product in filteredProducts\" :key=\"product.id\"> {{ product.code }} - {{ product.name }} - {{ product.unit }} - {{ product.shelf_life }} </li> </ul> </div> </template> Description : Vue template for the Products page component. Displays a title, sorting options, a search input, and a list of products.","title":"Products Page Component"},{"location":"Lab4/products/#products-page-component-script","text":"<script> import axios from 'axios'; export default { name: 'Products', data() { return { products: [], sortBy: 'code', searchTerm: '', }; }, computed: { sortedProducts() { return this.products.slice().sort((a, b) => { if (this.sortBy === 'code') { return a.code.localeCompare(b.code); } else if (this.sortBy === 'name') { return a.name.localeCompare(b.name); } else if (this.sortBy === 'unit') { return a.unit.localeCompare(b.unit); } else if (this.sortBy === 'shelf_life') { return a.shelf_life - b.shelf_life; } return 0; }); }, filteredProducts() { const search = this.searchTerm.toLowerCase(); return this.sortedProducts.filter( product => product.code.toLowerCase().includes(search) ); }, }, methods: { async fetchProducts() { try { const response = await axios.get('http://127.0.0.1:8000/main/products/', { headers: { Authorization: `Token ${localStorage.getItem('access_token')}`, }, }); this.products = response.data; } catch (error) { console.error('Error fetching product data:', error); } }, sortProducts() { // Triggered when sorting option changes }, filterProducts() { // Triggered when search term changes }, }, created() { this.fetchProducts(); }, }; </script> Description : Vue script for the Products page component. Manages data, computed properties, methods for fetching and filtering products.","title":"Products Page Component Script"},{"location":"Lab4/products/#finally-lets-review-the-consignmentsvue","text":"","title":"Finally, let's review the Consignments.vue"},{"location":"Lab4/profile/","text":"Profile.vue Profile Component <template> <div class=\"container\"> <div class=\"profile-info\"> <h2>Profile</h2> <div class=\"info-item\"><strong>Login:</strong> {{ userData.username }}</div> <div class=\"info-item\"><strong>Email:</strong> {{ userData.email }}</div> </div> <div class=\"profile-settings\"> <div class=\"settings-panel\"> <button @click=\"toggleSettingsPanel\">Change User Data</button> <div v-show=\"showSettingsPanel\" class=\"settings-dropdown\"> <button @click=\"toggleChangeUsernameForm\">Change Username</button> <button @click=\"toggleChangePasswordForm\">Change Password</button> </div> </div> <div v-if=\"showChangePasswordForm\" class=\"change-form\"> <form @submit.prevent=\"changePassword\" class=\"form\"> <label for=\"currentPassword\">Current Password:</label> <input type=\"password\" v-model=\"currentPassword\" required /> <label for=\"newPassword\">New Password:</label> <input type=\"password\" v-model=\"newPassword\" required /> <button type=\"submit\">Change Password</button> </form> </div> <div v-if=\"showChangeUsernameForm\" class=\"change-form\"> <form @submit.prevent=\"changeUsername\" class=\"form\"> <label for=\"currentPassword\">Current Password:</label> <input type=\"password\" v-model=\"currentPassword\" required /> <label for=\"newUsername\">New Username:</label> <input type=\"text\" v-model=\"newUsername\" required /> <button type=\"submit\">Change Username</button> </form> </div> </div> </div> </template> Description : Vue template for the profile component. Displays user information and provides options to change username and password. Profile Component Script <script> import axios from 'axios'; export default { data() { return { showChangePasswordForm: false, showChangeUsernameForm: false, showSettingsPanel: false, currentPassword: '', newPassword: '', newUsername: '', userData: {}, }; }, mounted() { this.fetchUserData(); }, methods: { async fetchUserData() { console.log('Fetching user data...'); try { const response = await axios.get('/auth/users/me/', { headers: { 'Authorization': `Token ${localStorage.getItem('access_token')}`, }, }); this.userData = response.data; console.log('User data:', this.userData); } catch (error) { console.error('Error fetching user data:', error.response.data); } }, async changePassword() { try { const response = await axios.post('/auth/users/set_password/', { new_password: this.newPassword, current_password: this.currentPassword, }, { headers: { 'Authorization': `Token ${localStorage.getItem('access_token')}`, }, }); console.log('Password changed successfully:', response.data); this.showChangePasswordForm = false; } catch (error) { console.error('Password change failed:', error.response.data); } }, async changeUsername() { try { const response = await axios.post('/auth/users/set_username/', { current_password: this.currentPassword, new_username: this.newUsername, }, { headers: { 'Authorization': `Token ${localStorage.getItem('access_token')}`, }, }); console.log('Username changed successfully:', response.data); this.showChangeUsernameForm = false; } catch (error) { console.error('Username change failed:', error.response.data); } }, toggleSettingsPanel() { this.showSettingsPanel = !this.showSettingsPanel; }, toggleChangePasswordForm() { this.showChangePasswordForm = !this.showChangePasswordForm; }, toggleChangeUsernameForm() { this.showChangeUsernameForm = !this.showChangeUsernameForm; }, }, }; </script> Description : Vue script for the profile component. Fetches user data, provides methods to change password and username, and handles the display of change forms. Profile Component Styles <style scoped> .container { max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); } .profile-info { margin-bottom: 20px; } .info-item { margin-bottom: 10px; } .profile-settings { border-top: 1px solid #ddd; padding-top: 20px; } .settings-panel { display: flex; justify-content: space-between; align-items: center; } .settings-dropdown { display: flex; flex-direction: column; align-items: center; Please, feel free to review Navbar.vue component next","title":"Profile"},{"location":"Lab4/profile/#profilevue","text":"","title":"Profile.vue"},{"location":"Lab4/profile/#profile-component","text":"<template> <div class=\"container\"> <div class=\"profile-info\"> <h2>Profile</h2> <div class=\"info-item\"><strong>Login:</strong> {{ userData.username }}</div> <div class=\"info-item\"><strong>Email:</strong> {{ userData.email }}</div> </div> <div class=\"profile-settings\"> <div class=\"settings-panel\"> <button @click=\"toggleSettingsPanel\">Change User Data</button> <div v-show=\"showSettingsPanel\" class=\"settings-dropdown\"> <button @click=\"toggleChangeUsernameForm\">Change Username</button> <button @click=\"toggleChangePasswordForm\">Change Password</button> </div> </div> <div v-if=\"showChangePasswordForm\" class=\"change-form\"> <form @submit.prevent=\"changePassword\" class=\"form\"> <label for=\"currentPassword\">Current Password:</label> <input type=\"password\" v-model=\"currentPassword\" required /> <label for=\"newPassword\">New Password:</label> <input type=\"password\" v-model=\"newPassword\" required /> <button type=\"submit\">Change Password</button> </form> </div> <div v-if=\"showChangeUsernameForm\" class=\"change-form\"> <form @submit.prevent=\"changeUsername\" class=\"form\"> <label for=\"currentPassword\">Current Password:</label> <input type=\"password\" v-model=\"currentPassword\" required /> <label for=\"newUsername\">New Username:</label> <input type=\"text\" v-model=\"newUsername\" required /> <button type=\"submit\">Change Username</button> </form> </div> </div> </div> </template> Description : Vue template for the profile component. Displays user information and provides options to change username and password.","title":"Profile Component"},{"location":"Lab4/profile/#profile-component-script","text":"<script> import axios from 'axios'; export default { data() { return { showChangePasswordForm: false, showChangeUsernameForm: false, showSettingsPanel: false, currentPassword: '', newPassword: '', newUsername: '', userData: {}, }; }, mounted() { this.fetchUserData(); }, methods: { async fetchUserData() { console.log('Fetching user data...'); try { const response = await axios.get('/auth/users/me/', { headers: { 'Authorization': `Token ${localStorage.getItem('access_token')}`, }, }); this.userData = response.data; console.log('User data:', this.userData); } catch (error) { console.error('Error fetching user data:', error.response.data); } }, async changePassword() { try { const response = await axios.post('/auth/users/set_password/', { new_password: this.newPassword, current_password: this.currentPassword, }, { headers: { 'Authorization': `Token ${localStorage.getItem('access_token')}`, }, }); console.log('Password changed successfully:', response.data); this.showChangePasswordForm = false; } catch (error) { console.error('Password change failed:', error.response.data); } }, async changeUsername() { try { const response = await axios.post('/auth/users/set_username/', { current_password: this.currentPassword, new_username: this.newUsername, }, { headers: { 'Authorization': `Token ${localStorage.getItem('access_token')}`, }, }); console.log('Username changed successfully:', response.data); this.showChangeUsernameForm = false; } catch (error) { console.error('Username change failed:', error.response.data); } }, toggleSettingsPanel() { this.showSettingsPanel = !this.showSettingsPanel; }, toggleChangePasswordForm() { this.showChangePasswordForm = !this.showChangePasswordForm; }, toggleChangeUsernameForm() { this.showChangeUsernameForm = !this.showChangeUsernameForm; }, }, }; </script> Description : Vue script for the profile component. Fetches user data, provides methods to change password and username, and handles the display of change forms.","title":"Profile Component Script"},{"location":"Lab4/profile/#profile-component-styles","text":"<style scoped> .container { max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); } .profile-info { margin-bottom: 20px; } .info-item { margin-bottom: 10px; } .profile-settings { border-top: 1px solid #ddd; padding-top: 20px; } .settings-panel { display: flex; justify-content: space-between; align-items: center; } .settings-dropdown { display: flex; flex-direction: column; align-items: center;","title":"Profile Component Styles"},{"location":"Lab4/profile/#please-feel-free-to-review-navbarvue-component-next","text":"","title":"Please, feel free to review Navbar.vue component next"},{"location":"Lab4/register/","text":"Register.vue Register Component <template> <div class=\"container\"> <h2>\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f</h2> <form @submit.prevent=\"registerUser\"> <label for=\"username\">\u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:</label> <input type=\"text\" v-model=\"username\" required /> <label for=\"email\">\u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0447\u0442\u0430:</label> <input type=\"email\" v-model=\"email\" required /> <label for=\"password\">\u041f\u0430\u0440\u043e\u043b\u044c:</label> <input type=\"password\" v-model=\"password\" required /> <button type=\"submit\">\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f</button> </form> </div> </template> Description : Vue template for the registration component. Includes a form with input fields for username, email, and password. Register Component Script <script> import axios from 'axios'; export default { data() { return { username: '', email: '', password: '', }; }, methods: { async registerUser() { try { const response = await axios.post('http://localhost:8000/auth/users/', { username: this.username, email: this.email, password: this.password, }); console.log('User registered successfully:', response.data); this.$router.push('/login'); } catch (error) { console.error('Registration failed:', error.response.data); } }, }, }; </script> Description : Vue script for the registration component. Defines the registerUser method to handle the form submission and make an API request to register a new user. Moving on to the Profile.vue","title":"Register"},{"location":"Lab4/register/#registervue","text":"","title":"Register.vue"},{"location":"Lab4/register/#register-component","text":"<template> <div class=\"container\"> <h2>\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f</h2> <form @submit.prevent=\"registerUser\"> <label for=\"username\">\u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:</label> <input type=\"text\" v-model=\"username\" required /> <label for=\"email\">\u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0447\u0442\u0430:</label> <input type=\"email\" v-model=\"email\" required /> <label for=\"password\">\u041f\u0430\u0440\u043e\u043b\u044c:</label> <input type=\"password\" v-model=\"password\" required /> <button type=\"submit\">\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f</button> </form> </div> </template> Description : Vue template for the registration component. Includes a form with input fields for username, email, and password.","title":"Register Component"},{"location":"Lab4/register/#register-component-script","text":"<script> import axios from 'axios'; export default { data() { return { username: '', email: '', password: '', }; }, methods: { async registerUser() { try { const response = await axios.post('http://localhost:8000/auth/users/', { username: this.username, email: this.email, password: this.password, }); console.log('User registered successfully:', response.data); this.$router.push('/login'); } catch (error) { console.error('Registration failed:', error.response.data); } }, }, }; </script> Description : Vue script for the registration component. Defines the registerUser method to handle the form submission and make an API request to register a new user.","title":"Register Component Script"},{"location":"Lab4/register/#moving-on-to-the-profilevue","text":"","title":"Moving on to the Profile.vue"}]}